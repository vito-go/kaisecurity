package dao

import (
	"context"
	"github.com/vito-go/kaisecurity/internal/model"
	"gorm.io/gorm"
)

type vulnerability struct {
	Gdb *gorm.DB
}

func (s *vulnerability) Table() string {
	return "vulnerability"
}

func (s *vulnerability) ItemsBySeverity(ctx context.Context, severity string) ([]model.Vulnerability, error) {
	var items []model.Vulnerability
	tx := s.Gdb.WithContext(ctx).Table(s.Table()).Where("severity = ?", severity).Order("update_time desc").Find(&items)
	if tx.Error != nil {
		return nil, tx.Error
	}
	return items, nil
}

func (s *vulnerability) UpdateOrCreate(ctx context.Context, m *model.Vulnerability) (err error) {
	TX := s.Gdb.WithContext(ctx).Table(s.Table()).Begin()
	defer func() {
		if err != nil {
			TX.Rollback()
			return
		}
		err = TX.Commit().Error
	}()
	tx := TX.Select("*").Omit("create_time").Where("scan_id = ? AND id=?", m.ScanId, m.Id).Updates(m)
	if tx.Error != nil {
		return tx.Error
	}
	if tx.RowsAffected == 0 {
		if err = TX.Create(m).Error; err != nil {
			return err
		}
		return nil
	}
	return nil
}
